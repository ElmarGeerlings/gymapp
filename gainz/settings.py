"""
Django settings for gainz project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Environment variables
REDIS_HOST = os.environ.get("REDIS_HOST", 'localhost')
REDIS_PORT = os.environ.get("REDIS_PORT", '6379')
REDIS_PASSWORD = os.environ.get("REDIS_PASSWORD", None)

try:
    from django_redis import get_redis_connection

    REDIS_CACHE_TYPE = 'django-redis'
except ImportError:
    try:
        import redis_cache

        REDIS_CACHE_TYPE = 'django-redis-cache'
    except ImportError:
        REDIS_CACHE_TYPE = 'none'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-w!r=&r-lul9aiu8pq!nh(tr9($++4xpt=un0nm&1=o#t^krf#g')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1,.onrender.com,gymapp-r7bx.onrender.com').split(',')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party apps
    'rest_framework',
    'corsheaders',
    'debug_toolbar',

    # Local apps
    'gainz.exercises',  # Full path to the app
    'gainz.workouts',   # Full path to the app
    'gainz.ai',         # AI conversation app
]

MIDDLEWARE = [
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # For static files in production
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # CORS middleware
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'gainz.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'gainz' / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'gainz.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Use DATABASE_URL from environment (Railway provides this)
import dj_database_url

# Get database URL from environment
DATABASE_URL = os.environ.get('DATABASE_URL')

# Check if we're on Render (they set RENDER environment variable)
IS_RENDER = os.environ.get('RENDER')

if DATABASE_URL:
    # Production database (Railway/Render)
    DATABASES = {
        'default': dj_database_url.parse(DATABASE_URL)
    }
elif IS_RENDER:
    # Use SQLite on Render if no DATABASE_URL (temporary for testing)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': '/tmp/db.sqlite3',
        }
    }
else:
    # Development database
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'gainz_db',
            'USER': 'gainz',
            'PASSWORD': 'elmar',
            'HOST': '127.0.0.1',
            'PORT': '5432',
        }
    }

# Redis configuration for production (optional)
# Disable Redis if not available (for free deployments)
REDIS_URL = os.environ.get('REDIS_URL')
if REDIS_URL:
    # Use the full REDIS_URL if provided (for Redis Cloud, Upstash, etc)
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': REDIS_URL,
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            },
        },
    }
elif REDIS_CACHE_TYPE == 'django-redis':
    # Fall back to individual Redis settings
    redis_url = f"redis://:{REDIS_PASSWORD}@" if REDIS_PASSWORD else "redis://"
    redis_url += f"{REDIS_HOST}:{REDIS_PORT}/0"

    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': redis_url,
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            },
        },
    }
elif REDIS_CACHE_TYPE == 'django-redis-cache':
    CACHES = {
        'default': {
            'BACKEND': 'redis_cache.cache.RedisCache',
            'LOCATION': f'{REDIS_HOST}:{REDIS_PORT}',
            'KEY_PREFIX': 'django-rq-tests',
            'OPTIONS': {
                'DB': 2,
                'MAX_ENTRIES': 5000,
            },
        },
    }

# Security settings for production
if not DEBUG:
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    X_FRAME_OPTIONS = 'DENY'

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

STATICFILES_DIRS = [
    BASE_DIR / 'gainz' / 'static',
]

# WhiteNoise configuration for static files
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Authentication Settings
LOGIN_REDIRECT_URL = '/'  # Redirect to homepage after login
LOGIN_URL = 'login'       # URL name of the login view

# RQ Queue configuration
if REDIS_URL:
    # Use the full REDIS_URL if provided
    RQ_QUEUES = {
        'default': {
            'URL': REDIS_URL,
            'DEFAULT_TIMEOUT': 500,
            'DEFAULT_RESULT_TTL': 500,
        },
        'django-redis': {
            'USE_REDIS_CACHE': 'default',
        },
    }
else:
    # Fall back to individual settings
    redis_url = f"redis://:{REDIS_PASSWORD}@" if REDIS_PASSWORD else "redis://"
    redis_url += f"{REDIS_HOST}:{REDIS_PORT}/0"
    
    RQ_QUEUES = {
        'default': {
            'URL': redis_url,
            'DEFAULT_TIMEOUT': 500,
            'DEFAULT_RESULT_TTL': 500,
        },
        'django-redis': {
            'USE_REDIS_CACHE': 'default',
        },
    }

if REDIS_CACHE_TYPE == 'django-redis-cache':
    RQ_QUEUES['django-redis-cache'] = {'USE_REDIS_CACHE': 'django-redis-cache'}

# AI Configuration
# Get your free API key from: https://aistudio.google.com/app/apikey
GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY', None)

# CORS settings for mobile access
CORS_ALLOWED_ORIGINS = [
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]

# Allow all origins in development, restrict in production
if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True
else:
    CORS_ALLOWED_ORIGINS.extend([
        "https://your-app-name.railway.app",  # Replace with your actual Railway domain
    ])

try:
    from .local import *
except ImportError:
    pass