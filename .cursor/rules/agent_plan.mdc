---
description: 
globs: 
alwaysApply: false
---
Okay, here's a plan and context for handover to a new agent:

**Project Goal:** Implement dynamic updates for "Performance Feedback" on the workout detail page. When a user clicks "Increase", "Stay", or "Decrease" for a logged exercise, the feedback should be saved, and the UI text indicating the current feedback should update instantly without a full page reload.

**Current Situation & Approach:**

*   **AJAX-based Solution:** We've opted for an AJAX-based solution using the project's existing JavaScript framework. This avoids introducing WebSockets for this specific feature to maintain simplicity.
*   **JavaScript (`gainz/static/gainz.js`):**
    *   The WebSocket-related code previously added has been **removed**.
    *   The global function `window.handle_and_morph(event)` is the core client-side handler.
    *   `handle_and_morph` is triggered by `data-function="click->handle_and_morph"` on HTML elements.
    *   It reads `data-routing` (an HTTP URL) and `data-target` (a CSS selector for the element to update) from the triggering element.
    *   It collects all other `data-*` attributes from the element (e.g., `data-workout-exercise-id`, `data-feedback`) and appends them as **query parameters** to the URL specified in `data-routing`.
    *   It then makes an **HTTP GET request** to this constructed URL using the existing `httpRequestHelper` function.
    *   Upon receiving a JSON response, it updates the `innerHTML` of the `data-target` element with `response.data.html`.
    *   It can also display toast notifications if `response.data.toast` is provided.
*   **HTML (`gainz/templates/partials/workout_exercise_card.html`):**
    *   The "Decrease", "Stay", and "Increase" feedback buttons have been configured with the necessary `data-*` attributes:
        *   `data-function="click->handle_and_morph"`
        *   `data-routing="{% url 'ajax_update_workout_exercise_feedback' %}"` (points to the Django view)
        *   `data-target="#feedback-status-{{ workout_exercise.id }}"` (points to the `<span>` that displays the feedback text)
        *   `data-workout-exercise-id="{{ workout_exercise.id }}"`
        *   `data-feedback="decrease|stay|increase"`
    *   The `<span>` to display the feedback text has the ID `feedback-status-{{ workout_exercise.id }}`.
*   **Django Backend:**
    *   **View (`gainz/views.py`):**
        *   A new view function `ajax_update_workout_exercise_feedback(request)` has been created.
        *   It's decorated with `@login_required`.
        *   It handles HTTP GET requests.
        *   It extracts `workoutExerciseId` (note the camelCase from JS `dataset` conversion) and `feedback` from `request.GET` parameters.
        *   It performs permission checks to ensure the logged-in user owns the `WorkoutExercise`.
        *   It validates the feedback value against choices in the `WorkoutExercise` model.
        *   It updates the `performance_feedback` field of the `WorkoutExercise` object in the database.
        *   It returns a `JsonResponse` containing:
            *   `html`: The new display text for the feedback (e.g., from `workout_exercise.get_performance_feedback_display()`).
            *   `toast` (optional): An object with `body`, `status`, and `title` for client-side toast notifications.
    *   **URLs (`gainz/urls.py`):**
        *   A new URL pattern `path('ajax/update_workout_exercise_feedback/', views.ajax_update_workout_exercise_feedback, name='ajax_update_workout_exercise_feedback')` has been added.
    *   **WebSockets Removed:**
        *   `gainz/consumers.py` and `gainz/routing.py` have been deleted.
        *   `gainz/asgi.py` has been reverted to the default Django ASGI application setup, removing Channels-specific configurations.

**Plan for New Agent / Next Steps:**

1.  **Verify Functionality:**
    *   Thoroughly test the feedback buttons on the `workout_detail.html` page.
    *   Confirm that clicking a button:
        *   Sends an AJAX GET request to `/ajax/update_workout_exercise_feedback/` with the correct query parameters (`workoutExerciseId`, `feedback`).
        *   The `ajax_update_workout_exercise_feedback` view correctly processes the request, updates the database, and returns the appropriate `JsonResponse`.
        *   The `handle_and_morph` JavaScript function successfully updates the `innerHTML` of the `#feedback-status-{{ workout_exercise.id }}` span with the HTML from the response.
        *   Toast notifications appear as expected for success and error scenarios.
        *   Permission checks in the view function correctly prevent unauthorized updates.
        *   Input validation (e.g., for `feedback_value`) works as intended.
2.  **Review Error Handling:**
    *   Check client-side error handling in `handle_and_morph` for network issues or non-OK HTTP responses.
    *   Check server-side error handling in the `ajax_update_workout_exercise_feedback` view (e.g., `DoesNotExist`, `ValueError`, permissions). Ensure appropriate JSON responses are sent back for `handle_and_morph` to display errors or update the target HTML with an error message.
3.  **Code Review & Refinements:**
    *   Review the JavaScript in `gainz.js`, particularly `handle_and_morph`, for clarity and robustness.
    *   Review the Python code in `gainz/views.py` for the `ajax_update_workout_exercise_feedback` view, checking for efficiency, security, and adherence to Django best practices.
4.  **Consider Edge Cases:**
    *   What happens if multiple clicks are made rapidly? (The current AJAX setup should handle these as separate requests; `event.preventDefault()` is used).
    *   Are there any specific UI states that need to be managed during the AJAX request (e.g., temporarily disabling buttons)? (Currently not implemented, but could be added to `handle_and_morph` if desired).
5.  **Documentation (if necessary):**
    *   Ensure comments in the code are clear, especially around the `handle_and_morph` flow and the `ajax_update_workout_exercise_feedback` view.

This approach leverages the existing client-side infrastructure for AJAX calls and Django's standard request-response cycle for the backend, providing a simpler path to achieving the desired dynamic UI update compared to introducing WebSockets solely for this feature.
