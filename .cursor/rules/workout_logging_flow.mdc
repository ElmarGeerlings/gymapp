---
description: 
globs: 
alwaysApply: false
---
# Gainz App: Workout Logging and Progression Flow

This document outlines the intended structure and flow for workout logging, planning, and progression within the Gainz application. The core idea is to separate the *plan* (Programs and Routines) from the *execution* (Workout logs) while providing mechanisms for feedback-driven progression.

## Core Models Involved

The primary models reside in `gainz.workouts.models` and `gainz.exercises.models`.

### 1. Planning & Template Models (`gainz.workouts.models`)

*   **`Program`**:
    *   Represents a high-level collection of routines (e.g., "My Weekly Split", "Beginner Strength Cycle").
    *   Fields: `user`, `name`, `description`, `is_public` (for future sharing).
    *   A `Program` can contain multiple `Routine` objects.

*   **`Routine`**:
    *   Represents a specific, reusable workout structure or template (e.g., "Monday - Chest & Triceps", "Heavy Squat Day").
    *   Fields: `user`, `program` (Optional ForeignKey to `Program`), `name`, `description`.
    *   A `Routine` can be standalone or part of a `Program`.
    *   A `Routine` consists of multiple `RoutineExercise` entries.

*   **`RoutineExercise`**:
    *   Defines a specific exercise within a `Routine`. This is where the *plan* for an exercise is detailed.
    *   Fields: `routine` (ForeignKey to `Routine`), `exercise` (ForeignKey to `gainz.exercises.models.Exercise`), `order`, `target_sets` (e.g., 3), `target_reps` (e.g., "5", "8-12", "AMRAP"), `target_rest_seconds` (optional), `progression_strategy_notes` (user's textual notes on how they intend to progress this exercise), `notes` (optional notes for this exercise within the routine plan).

### 2. Workout Logging (Execution) Models (`gainz.workouts.models`)

*   **`Workout`**:
    *   Represents a single, completed workout session by a user on a specific date.
    *   Fields: `user`, `date`, `name`, `notes` (general workout notes), `duration`.
    *   **`routine_source`**: Crucial ForeignKey (nullable) to `Routine`. Links this logged workout back to the `Routine` it was based on, if any.

*   **`WorkoutExercise`**:
    *   Represents a specific exercise *as performed* during a logged `Workout`.
    *   Fields: `workout` (ForeignKey to `Workout`), `exercise` (ForeignKey to `gainz.exercises.models.Exercise`), `order`, `notes` (notes specific to *this performance*), `exercise_type` (primary/secondary/accessory, can override `Exercise` default).
    *   **`routine_exercise_source`**: Crucial ForeignKey (nullable) to `RoutineExercise`. Links this performed instance back to its definition in the plan.
    *   **`performance_feedback`**: CharField (nullable, choices: 'increase', 'stay', 'decrease'). Captures user feedback *after* performing the exercise, used for future progression suggestions.

*   **`ExerciseSet`**:
    *   Represents a single set performed for a `WorkoutExercise`. Stores the actual performance details.
    *   Fields: `workout_exercise` (ForeignKey to `WorkoutExercise`), `set_number`, `reps` (actual reps performed), `weight` (actual weight used), `is_warmup`.

## Intended Workflow & Progression

### A. Logging a Routine-Based Workout:
1.  **Selection:** User selects a `Routine` to perform.
2.  **Workout Creation:** A new `Workout` log is created. `Workout.routine_source` is set to the selected `Routine`.
3.  **Exercise Population (Suggestion Logic - *Future Implementation*):**
    *   For each `RoutineExercise` in the chosen `Routine`:
        *   The system finds previous `WorkoutExercise` logs linked via `routine_exercise_source`.
        *   It reads the `performance_feedback` from the most recent of these logs.
        *   It consults `RoutineExercise.progression_strategy_notes`.
        *   It calculates and pre-fills *suggested* reps/weight for a new `WorkoutExercise` instance.
        *   This new `WorkoutExercise` has its `routine_exercise_source` set to the parent `RoutineExercise`.
4.  **Performance & Recording:** User performs sets, and actual reps/weight are recorded as `ExerciseSet` entries linked to the current `WorkoutExercise`.
5.  **Feedback:** User provides `performance_feedback` on the `WorkoutExercise` (e.g., 'increase' if it felt easy). This feedback will inform suggestions for the *next* time this `RoutineExercise` is performed.

### B. Handling Different Contexts (e.g., Heavy vs. Light Days):
*   The same exercise (e.g., Bench Press) performed with different goals (strength vs. volume) during a week should be defined as separate `RoutineExercise` entries within distinct `Routine` objects.
    *   Example: "Monday - Heavy Bench" `Routine` has a `RoutineExercise` for Bench Press targeting 3x5. "Friday - Volume Bench" `Routine` has a *different* `RoutineExercise` for Bench Press targeting 4x10.
*   Progression for each context is tracked independently due to the distinct `RoutineExercise` linkage.

### C. Ad-Hoc Workout Logging (Not Based on a Routine):
*   Users can log workouts without selecting a `Routine`.
*   **Progression:** The detailed feedback-driven progression (A.3) doesn't apply directly as there's no `RoutineExercise` context.
*   **Future Suggestion Idea:** For ad-hoc exercises, a simpler suggestion based on the *absolute last time* that specific `Exercise` was logged in *any* workout might be offered (e.g., "Last time you did Squat: 3 sets of 5 at 100kg. Repeat or adjust?"). This would be a non-intrusive UI option.

This structure provides a robust foundation for detailed workout tracking, template-based training, and a feedback loop for guided progression.

