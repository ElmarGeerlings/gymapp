# Gainz App: Workout Logging and Progression Flow

This document outlines the intended structure and flow for workout logging, planning, and progression within the Gainz application. The core idea is to separate the *plan* (Programs and Routines) from the *execution* (Workout logs) while providing mechanisms for feedback-driven progression and flexible scheduling.

## Core Models Involved

The primary models reside in `gainz.workouts.models` and `gainz.exercises.models`.

### 1. Planning & Template Models (`gainz.workouts.models`)

*   **`Program`**:
    *   Represents a high-level collection of routines (e.g., \"My Weekly Split\", \"Beginner Strength Cycle\").
    *   Fields: `user`, `name`, `description`, `is_public`.
    *   **`scheduling_type`**: Crucial CharField with choices 'weekly' or 'sequential'.
        *   **'weekly'**: The program follows a fixed 7-day schedule. `ProgramRoutine` entries are tied to specific days of the week.
        *   **'sequential'**: The program is a rotating sequence of routines, independent of the calendar day.
    *   A `Program` can contain multiple `Routine` objects, linked via `ProgramRoutine`.

*   **`Routine`**:
    *   Represents a specific, reusable workout structure or template (e.g., \"Monday - Chest & Triceps\", \"Heavy Squat Day\").
    *   Fields: `user`, `name`, `description`.
    *   A `Routine` consists of multiple `RoutineExercise` entries.

*   **`ProgramRoutine`**:
    *   The link between a `Program` and a `Routine`.
    *   Fields: `program`, `routine`.
    *   **`assigned_day`**: Used for 'weekly' programs to assign a routine to a specific day (e.g., Monday=0).
    *   **`order`**: Used for 'sequential' programs to define the order of rotation (1, 2, 3...). For weekly programs, it defines the order of routines *within* the same day.

*   **`RoutineExercise`** & **`RoutineExerciseSet`**: These define the specific exercises and set/rep/weight plans within a `Routine`. Their structure remains unchanged.

### 2. Workout Logging (Execution) Models (`gainz.workouts.models`)

The structure of `Workout`, `WorkoutExercise`, and `ExerciseSet` remains the same. They capture the *actual* performance of a workout session. The `routine_source` and `routine_exercise_source` foreign keys are essential for linking a logged workout back to its plan.

## Intended Workflow & Progression

### A. Starting the Next Workout (`start_next_workout` view)
1.  **Identify Active Program:** The system looks for the user's `Program` where `is_active=True`.
2.  **Determine Scheduling Type:** It checks the `scheduling_type` of the active program.
3.  **Find Next Routine:**
    *   **If 'weekly'**: The system checks the current day of the week (e.g., it's Tuesday). It finds the `ProgramRoutine` entry assigned to Tuesday and suggests the corresponding `Routine`. If multiple routines are on that day, it could suggest the first one. A day with no assigned routine is a rest day.
    *   **If 'sequential'**: The system finds the user's *last* completed workout that was sourced from this program. It determines the `order` of that workout's routine and finds the `ProgramRoutine` with the next `order`. If it reaches the end of the sequence, it wraps around to the beginning.
4.  **Initiate Workout:** The user is redirected to the `start_workout_from_routine` page, pre-filled with the suggested routine.

### B. Logging and Progression
The rest of the flow remains the same. The user performs the workout, logs their sets, and provides `performance_feedback` on each `WorkoutExercise`. This feedback is crucial for future progression suggestions, which will be implemented later.